// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Overflower.Persistence;

#nullable disable

namespace Overflower.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240327102007_AddTags")]
    partial class AddTags
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Overflower.Persistence.Entities.Tags.TagEntity", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "count");

                    b.Property<bool>("HasSynonyms")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "has_synonyms");

                    b.Property<bool>("IsModeratorOnly")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_moderator_only");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_required");

                    b.HasKey("Name");

                    b.ToTable("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
